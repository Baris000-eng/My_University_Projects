In the exercise-3 of the homework5, to make the code no longer vulnerable, I have tried to limit the characters , which the scanf("%s",username) statement reads. For this purpose, I have just modified the %s part in the scanf statement. I have converted the %s to the %99[^\n]s. Here, 99 is the number of the charachters, which the scanf statement can read and the remaining one character is the null terminating character, which is represented as \n. The number we wrote to the char username [100] part is 100. Because, the username char array should include the null terminating character. In other words, the capacity of the username char array should be at least 100, in order to make sure that null terminating character is included and the other 99 charachters which the scanf statement will read are also included. In the modified scanf statement, the [^\n] part represents the null terminating character. Even though I can enter an input which contains more than 99 charachters, by the modification that I have done, program will not crash and take the input as the first 99 characters of the entered input. By taking everything into the consideration, we can patch dynamically sized buffers against buffer overflow vulnerabilities by limiting the number of characters which scanf reads. For this example, we should make sure that the input which is read by the scanf statement on the line13 does not contain more than 99 characters. So, we should modify the %s part in the scanf statement on the line 13 and make this part %99[^\n]s.